{"version":3,"sources":["Finder.js","App.js","serviceWorker.js","index.js"],"names":["client","Yelp","Finder","props","updateKeyword","event","setState","keyword","target","value","updatePrice","price","updateRadius","radius","submit","a","preventDefault","getRestaurants","alert","state","search","url","term","latitude","longitude","res","json","data","this","onSubmit","class","for","id","type","onChange","name","checked","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bf1cbc47.chunk.js","sourcesContent":["import React from 'react';\r\nimport Yelp from 'yelp-fusion';\r\n\r\nconst YELP_API_KEY = `-HeP8h5vxG9m7oMgl19pfdOInl00TMSuYC7QAMnVxn9QJszINxaiYs5CLHjksNvGEDEBI0T9LF3XEiL7hYIusLAknMfxYEEaQLVhnbIMnV4JemAYVxo0r3Xl_mFTXnYx`;\r\nconst YELP_CLIENT_ID = `5Kf0u7VlZDAGDCaueGe1EA`;\r\nconst client = Yelp.client(YELP_API_KEY);\r\nconst latitude = '43.133949';\r\nconst longitude = '-70.918968';\r\n\r\nexport class Finder extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  \r\n    this.state = {\r\n       keyword: '',\r\n       price: '2',\r\n       radius: '10'\r\n    };\r\n  }\r\n\r\n  updateKeyword = (event) => {\r\n    this.setState({keyword: event.target.value});\r\n  };\r\n\r\n  updatePrice = (event) => {\r\n    this.setState({price: event.target.value});\r\n  };\r\n  \r\n  updateRadius = (event) => {\r\n    this.setState({radius: event.target.value});\r\n  };\r\n\r\n  submit = async event => {\r\n    event.preventDefault();\r\n    // send API call and show map stuff\r\n    const data = this.getRestaurants;\r\n    \r\n    alert(`keyword: ${this.state.keyword}\\nprice: ${this.state.price}\\nradius: ${this.state.radius} meters`);\r\n  };\r\n\r\n  getRestaurants = async() => {\r\n    const res = await client.search({\r\n      url: 'https://api.yelp.com/v3/businesses/search/',\r\n      term: this.state.keyword,\r\n      price: this.state.price,\r\n      radius: this.state.radius,\r\n      latitude: latitude,\r\n      longitude: longitude\r\n    });\r\n    const data = await res.json();\r\n    return data;\r\n  };\r\n\r\n  render() {\r\n    const {keyword, price, radius} = this.state;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.submit}>\r\n            {/* keyword field want to add autocomplete from Yelp API*/}\r\n            <div class='form-group'>\r\n              <label for='keyword'>Keyword:</label><br/>\r\n              <input id='keyword' type='text' class='form-control' value={keyword} onChange={this.updateKeyword}/>\r\n              <br/>\r\n            </div>\r\n          \r\n            {/* price field: in Yelp API prices are 1,2,3,4 */}\r\n            <p>Price:</p>\r\n            <div class='custom-control custom-radio'>\r\n              <input id='super' type='radio' name='price' value='4' class='custom-control-input' checked={price === '4'} onChange={this.updatePrice}/>\r\n              <label for='super' class='custom-control-label'>$$$$</label><br/>\r\n            </div>\r\n            <div class='custom-control custom-radio'>\r\n              <input id='high' type='radio' name='price' value='3' class='custom-control-input' checked={price === '3'} onChange={this.updatePrice}/>\r\n              <label for='high' class='custom-control-label'>$$$</label><br/>\r\n            </div>\r\n            <div class='custom-control custom-radio'>\r\n              <input id='mid' type='radio' name='price' value='2' class='custom-control-input' checked={price === '2'} onChange={this.updatePrice}/>\r\n              <label for='mid' class='custom-control-label'>$$</label><br/>\r\n            </div>\r\n            <div class='custom-control custom-radio'>\r\n              <input id='low' type='radio' name='price' value='1' class='custom-control-input' checked={price === '1'} onChange={this.updatePrice}/>\r\n              <label for='low' class='custom-control-label'>$</label><br/><br/>\r\n            </div>\r\n          \r\n            {/* radius field, in meters */}\r\n            <div class='form-group'>\r\n              <label for='radius'>Radius (meters):</label>\r\n              <input id='radius' type='number' class='form-control' value={radius} onChange={this.updateRadius}/>\r\n              <br />\r\n            </div>\r\n            <button class='btn btn-primary'>Search</button>\r\n          </form>\r\n      </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default Finder;\r\n","import React from 'react';\nimport Finder from './Finder.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Chow Now</h1>\n      <Finder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}